# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3'
#Define Services
services:
  
  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: golang-db
    restart: unless-stopped
    tty: true
    ports:
    - "3309:3306"
    expose:
    - "3306"
    environment:
      MYSQL_DATABASE: go_db
      MYSQL_ROOT_PASSWORD: root
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
    - dbdata:/var/lib/mysql/
    - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
    - app-network

  # App Service
  app:

    container_name: golang-app
    # Configuration for building the docker image for the service
    build:
      context: . # Use an image built from the specified dockerfile in the current directory.
      dockerfile: docker/golang/Dockerfile
    ports:
      - "3001:3001" # Forward the exposed port 8080 on the container to port 8080 on the host machine
      - "3002:3002" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    expose:
    - "3001"
    - "3002"
    command: gin --port 3002 run main.go #go run main.go
    volumes:
      - ./:/app
    restart: unless-stopped
    depends_on: 
      - redis # This service depends on redis. Start that first.
      - db # This service depends on db. Start that first.
    environment: # Pass environment variables to the service
      REDIS_URL: redis:6379    
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - app-network
  
  #webpack node
  # webpack_npm:
  #   container_name: GOLANG_WEBPACK_NPM
  #   build: docker/npm_webpack/Dockerfile
  #   image: webpack_npm
  #   command: ["npm", "run","watch"]
  #   depends_on:
  #   - app
  #   volumes:
  #   - ./:/app

  # Redis Service   
  redis:
    image: "redis:alpine" # Use a public Redis image to build the redis service    
    restart: unless-stopped
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local